// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/char/search": {
            "get": {
                "description": "get a character list from a character",
                "produces": [
                    "application/json"
                ],
                "summary": "search a character",
                "parameters": [
                    {
                        "type": "string",
                        "description": "a single character",
                        "name": "q",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "default: 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "default: 10; '0' means default; '-1' means no limitation",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "if 'true', pick up a single character for each title",
                        "name": "delegate",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mojiportal.List"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/mojiportal.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/mojiportal.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "mojiportal.Char": {
            "type": "object",
            "properties": {
                "character": {
                    "type": "string"
                },
                "creator": {
                    "type": "string"
                },
                "delegate": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "link": {
                    "type": "string"
                },
                "manifest_url": {
                    "type": "string"
                },
                "rights": {
                    "type": "string"
                },
                "rights_url": {
                    "type": "string"
                },
                "source": {
                    "type": "object",
                    "$ref": "#/definitions/mojiportal.Source"
                },
                "subject": {
                    "type": "string"
                },
                "thumbnail_url": {
                    "type": "string"
                },
                "unicode": {
                    "type": "string"
                }
            }
        },
        "mojiportal.ErrorItem": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "mojiportal.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mojiportal.ErrorItem"
                    }
                }
            }
        },
        "mojiportal.List": {
            "type": "object",
            "properties": {
                "list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/mojiportal.Char"
                    }
                },
                "search_results": {
                    "type": "integer"
                }
            }
        },
        "mojiportal.Source": {
            "type": "object",
            "properties": {
                "bid": {
                    "type": "string"
                },
                "frame": {
                    "type": "integer"
                },
                "label": {
                    "type": "string"
                },
                "side": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "0.0.1",
	Host:        "lab.nijl.ac.jp",
	BasePath:    "/jikei/api",
	Schemes:     []string{"https"},
	Title:       "国文研字形検索βAPI",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
